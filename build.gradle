apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
targetCompatibility = 1.7

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

repositories {
    jcenter()
}

dependencies {
    compile 'com.threerings:getdown:1.3.1'
    compile 'com.google.code.gson:gson:2.2.+'
    compile 'org.slf4j:slf4j-api:1.7.+'
    compile 'org.slf4j:jul-to-slf4j:1.7.+'
    compile 'ch.qos.logback:logback-core:1.1.+'
    compile 'ch.qos.logback:logback-classic:1.1.+'
    testCompile 'junit:junit:4.10'
}

test {
    testLogging.showStandardStreams = true
}

sourceSets {
    main {
        resources {
            exclude '**/*.db'
        }
    }
}

def buildtime = new Date().format("yyyyMMddHHmmss")

new ByteArrayOutputStream().withStream { execOS ->
    exec {
        executable = 'git'
        args = [ 'describe', '--tags', '--always' ]
        standardOutput = execOS
    }
    def describe = execOS.toString().trim()
    version describe
}

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    archiveName = 'lawena.jar'
    destinationDir = null
    manifest {
        attributes (
            'Main-Class': 'ui.LwrtGUI',
            'Implementation-Title': 'Lawena Recording Tool',
            'Implementation-Version': version,
            'Implementation-Build': buildtime,
            'SplashScreen-Image': 'ui/splash.png'
        )
    }
}
